set serveroutput on

-- 문제 삽입시 문제 세부사항에도 문제 번호 삽입하기.
CREATE OR REPLACE TRIGGER TG_QDETAIL1
AFTER INSERT ON QUESTION
FOR EACH ROW
BEGIN
INSERT INTO Q_DETAIL VALUES (:NEW.Q_CODE,0,0,0,NULL);
END;
/

--문제 생성시 문제 푼 사람 업데이트 하기.
CREATE OR REPLACE TRIGGER TG_QDETAIL2
AFTER INSERT ON EXAME_DETAIL
FOR EACH ROW
BEGIN
 UPDATE Q_DETAIL SET Q_NOTT = Q_NOTT+1
                     WHERE Q_CODE = :NEW.Q_CODE;
END;
/

--문제 삭제시 같이 삭제되기
CREATE OR REPLACE TRIGGER TG_QDETAIL3
AFTER DELETE ON QUESTION
FOR EACH ROW
BEGIN 
 DELETE FROM Q_DETAIL WHERE Q_CODE=:OLD.Q_CODE;
END;
/

--시험지 번호 시퀀스 생성
CREATE SEQUENCE EXAME_NUM_SEQ 
START WITH 1 NOCACHE;
SELECT EXAME_NUM_SEQ.CURRVAL FROM DUAL;

--문제 랜덤불러오기/시험지 생성/문제 기본 세부사항 저장
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE SP_TEST(U_CODE MEMBER.MEM_CODE%TYPE,X IN NUMBER,TY QUESTION.T_CODE%TYPE)
IS
 PNUM NVARCHAR2(11);
 Y QUESTION.Q_CODE%TYPE;
 QP QUESTION.Q_PROBLEM%TYPE;
 QC1 QUESTION.Q_C1%TYPE;
 QC2 QUESTION.Q_C2%TYPE;
 QC3 QUESTION.Q_C3%TYPE;
 QC4 QUESTION.Q_C4%TYPE;
 DS EXAME_DETAIL.D_SCORE%TYPE;
 ED_CODE EXAME.EXAME_CODE%TYPE;
 QA QUESTION.Q_ANS%TYPE;
BEGIN 
SELECT COUNT(Q_CODE) INTO Y FROM QUESTION WHERE T_CODE=TY;

IF X<=10 AND TY='MC' THEN
 INSERT INTO EXAME VALUES ('EX'||EXAME_NUM_SEQ.NEXTVAL,NULL,U_CODE);
 ED_CODE := 'EX'||EXAME_NUM_SEQ.CURRVAL;
 FOR CNT IN 1..X LOOP
  DS:=ROUND(10/X*10,2);
  PNUM:='MC'||ROUND(DBMS_RANDOM.VALUE(1,Y),0);
   SELECT Q_PROBLEM,Q_C1,Q_C2,Q_C3,Q_C4 INTO QP,QC1,QC2,QC3,QC4 FROM QUESTION WHERE Q_CODE=PNUM;
   DBMS_OUTPUT.PUT_LINE(CNT||'번 문제 '||QP||' ('||DS||')점');
   DBMS_OUTPUT.PUT_LINE('1.'||QC1);
   DBMS_OUTPUT.PUT_LINE('2.'||QC2);
   DBMS_OUTPUT.PUT_LINE('3.'||QC3);
   DBMS_OUTPUT.PUT_LINE('4.'||QC4);
   DBMS_OUTPUT.PUT_LINE('---------------------------------');
   SELECT Q_ANS INTO QA FROM QUESTION WHERE Q_CODE=PNUM;
   INSERT INTO EXAME_DETAIL VALUES (ED_CODE,PNUM,CNT,NULL,QA,NULL,SYSTIMESTAMP,SYSTIMESTAMP,DS);
 END LOOP;
   DBMS_OUTPUT.PUT_LINE('1번문제의 답을 EXECUTE SP_ANS('||ED_CODE||',1, 정답) 의 순서로 입력하시오');

 ELSIF X<=10 AND TY='SA' THEN
  INSERT INTO EXAME VALUES ('EX'||EXAME_NUM_SEQ.NEXTVAL,NULL,U_CODE);
 ED_CODE := 'EX'||EXAME_NUM_SEQ.CURRVAL;
 FOR CNT IN 1..X LOOP
  DS:=ROUND(10/X*10,2);
  PNUM:='SA'||ROUND(DBMS_RANDOM.VALUE(1,Y),0);
   SELECT Q_PROBLEM INTO QP FROM QUESTION WHERE Q_CODE=PNUM;
   DBMS_OUTPUT.PUT_LINE(CNT||'번 문제 '||QP||' ('||DS||')점');
   DBMS_OUTPUT.PUT_LINE('---------------------------------');
   SELECT Q_ANS INTO QA FROM QUESTION WHERE Q_CODE=PNUM;
   INSERT INTO EXAME_DETAIL VALUES (ED_CODE,PNUM,CNT,NULL,QA,NULL,SYSTIMESTAMP,SYSTIMESTAMP,DS);
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('1번문제의 답을 EXECUTE SP_ANS('||ED_CODE||',1, 정답) 의 순서로 입력하시오');

 ELSIF X>10 OR X<0 THEN
 DBMS_OUTPUT.PUT_LINE('한번에 10문제만 풀 수 있습니다.');
END IF;
END;
/

SET SERVEROUTPUT ON;

EXECUTE SP_TEST('U1612120001',5,'SA');
SELECT * FROM EXAME;
SELECT * FROM EXAME_dETAIL;
SELECT * FROM Q_DETAIL;
EXECUTE SP_ANS('EX8',1,5);
EXECUTE SP_ANS('EX8',2,4);
EXECUTE SP_ANS('EX8',3,3);
EXECUTE SP_ANS('EX8',4,2);
EXECUTE SP_ANS('EX8',5,1);

SELECT * FROM EXAME;
SELECT * FROM EXAME_DETAIL;
SELECT * FROM Q_DETAIL;

EXECUTE SP_ANS('EX2',6,3);
EXECUTE SP_ANS('EX2',7,3);
EXECUTE SP_ANS('EX2',8,3);
EXECUTE SP_ANS('EX2',9,3);
EXECUTE SP_ANS('EX2',10,3);
SELECT * FROM EXAME_DETAIL;
SELECT * FROM EXAME;
-----------------------

--------------------정답 입력하기------------------------------------
CREATE OR REPLACE PROCEDURE SP_ANS(ED_CODE IN EXAME_DETAIL.EXAME_CODE%TYPE,
                                    X IN EXAME_DETAIL.D_NUM%TYPE,
                                    ANS IN EXAME_DETAIL.D_ANS%TYPE)
IS
CANS EXAME_DETAIL.D_CANS%TYPE;
Y EXAME_DETAIL.D_NUM%TYPE;
Z NUMBER;
AV NUMBER;
BEGIN
SELECT MAX(D_NUM) INTO Y FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE;

IF X<Y THEN
 SELECT D_CANS INTO CANS FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
 UPDATE EXAME_DETAIL SET D_ANS = ANS,D_LTIME=SYSTIMESTAMP WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  IF ANS = CANS THEN
  UPDATE EXAME_DETAIL SET D_CRR='Y' WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  UPDATE Q_DETAIL SET Q_NOCA=Q_NOCA+1 WHERE Q_CODE = (SELECT Q_CODE FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_NUM=X);
  ELSIF ANS <> CANS THEN
  UPDATE EXAME_DETAIL SET D_CRR='N' WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  END IF;
 DBMS_OUTPUT.PUT_LINE(X+1||'번문제의 답을 EXECUTE SP_ANS('||ED_CODE||','||TO_CHAR(X+1)||', 정답) 의 순서로 입력하시오');
 UPDATE EXAME_DETAIL SET D_STIME=SYSTIMESTAMP WHERE EXAME_CODE=ED_CODE AND D_NUM=X+1;
 
ELSIF X=Y THEN
 SELECT D_CANS INTO CANS FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
 UPDATE EXAME_DETAIL SET D_ANS = ANS,D_LTIME=SYSTIMESTAMP WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  IF ANS = CANS THEN
  UPDATE EXAME_DETAIL SET D_CRR='Y' WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  UPDATE Q_DETAIL SET Q_NOCA=Q_NOCA+1 WHERE Q_CODE = (SELECT Q_CODE FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_NUM=X) ;
  ELSIF ANS <> CANS THEN
  UPDATE EXAME_DETAIL SET D_CRR='N' WHERE EXAME_CODE=ED_CODE AND D_NUM=X;
  END IF;
  SELECT COUNT(D_CRR) INTO Z FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_CRR='Y'; 
  DBMS_OUTPUT.PUT_LINE('수고하셨습니다.');
  DBMS_OUTPUT.PUT_LINE('총 '||Z*100/Y||'점 입니다.');
  UPDATE EXAME SET EXAME_SCORE=Z*100/Y WHERE EXAME_CODE=ED_CODE;
  SELECT AVG(EXAME_SCORE) INTO AV FROM EXAME GROUP BY MEM_CODE HAVING MEM_CODE=(SELECT MEM_CODE FROM EXAME WHERE EXAME_CODE=ED_CODE);
  DBMS_OUTPUT.PUT_LINE('평균: '||AV||'점');
ELSIF X>Y THEN
 DBMS_OUTPUT.PUT_LINE('잘못입력하셨습니다.');
END IF;
  update q_detail SET Q_POCA=Q_NOCA/Q_NOTT*100 WHERE Q_CODE = (SELECT Q_CODE FROM EXAME_DETAIL WHERE EXAME_CODE=ED_CODE AND D_NUM=X);
END;
/
SHOW ERROR;
----------------------------------------------------------------------

----정답율 100%인 문제 보기
SELECT Q_CODE, Q_POCA FROM Q_DETAIL
WHERE Q_POCA=100;

--'U1612020001'의 틀린문제 저장한 뷰
CREATE or replace VIEW WR_PR
AS
SELECT ED.Q_CODE,Q_PROBLEM,Q_C1,Q_C2,Q_C3,Q_C4
FROM MEMBER M ,EXAME E ,EXAME_DETAIL ED, QUESTION Q
WHERE M.MEM_CODE=E.MEM_CODE AND E.EXAME_CODE=ED.EXAME_CODE AND ED.Q_CODE=Q.Q_CODE
AND D_CRR='N' AND M.MEM_CODE='U1612020001';
select * from wr_pr;

CREATE OR REPLACE PROCEDURE WR_Q (U_CODE IN MEMBER.MEM_CODE%TYPE)
IS
TY QUESTION.T_CODE%TYPE;
QP QUESTION.Q_PROBLEM%TYPE;
QC1 QUESTION.Q_C1%TYPE;
QC2 QUESTION.Q_C2%TYPE;
QC3 QUESTION.Q_C3%TYPE;
QC4 QUESTION.Q_C4%TYPE;
U_NAME MEMBER.MEM_NAME%TYPE;
CURSOR WCR IS SELECT T_CODE,Q_PROBLEM,Q_C1,Q_C2,Q_C3,Q_C4 FROM QUESTION,EXAME,EXAME_DETAIL WHERE EXAME.EXAME_CODE=EXAME_DETAIL.EXAME_CODE AND QUESTION.Q_CODE=EXAME_DETAIL.Q_CODE  AND D_CRR='N' AND EXAME.MEM_CODE=U_CODE;
BEGIN
 SELECT MEM_NAME INTO U_NAME FROM MEMBER WHERE MEM_CODE=U_CODE;
 DBMS_OUTPUT.PUT_LINE(U_NAME||'의 틀린 문제 내역입니다.');
 DBMS_OUTPUT.PUT_LINE('-------------------------------------------');
 OPEN WCR;
 LOOP
  FETCH WCR INTO TY,QP,QC2,QC2,QC3,QC4;
  EXIT WHEN WCR%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE('문제: '||QP);
  IF TY='MC' THEN
  DBMS_OUTPUT.PUT_LINE('1.'||QC1);
  DBMS_OUTPUT.PUT_LINE('2.'||QC2);
  DBMS_OUTPUT.PUT_LINE('3.'||QC3);
  DBMS_OUTPUT.PUT_LINE('4.'||QC4);
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  ELSIF TY<>'MC' THEN
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  END IF;
 END LOOP;
 CLOSE WCR;
END;
/
EXECUTE WR_Q('U1612020001');

------------------------------------------------------------------------
--정답율에 따른 문제 보기
CREATE OR REPLACE PROCEDURE SP_POCA (POCA IN Q_DETAIL.Q_POCA%TYPE)
IS
TY QUESTION.T_CODE%TYPE;
QP QUESTION.Q_PROBLEM%TYPE;
QC1 QUESTION.Q_C1%TYPE;
QC2 QUESTION.Q_C2%TYPE;
QC3 QUESTION.Q_C3%TYPE;
QC4 QUESTION.Q_C4%TYPE;
CURSOR WCR IS SELECT T_CODE,Q_PROBLEM,Q_C1,Q_C2,Q_C3,Q_C4 FROM QUESTION,Q_DETAIL WHERE QUESTION.Q_CODE=Q_DETAIL.Q_CODE  AND Q_POCA=POCA;
BEGIN
 DBMS_OUTPUT.PUT_LINE('정답률 '||POCA||'%인 문제 내역입니다.');
 DBMS_OUTPUT.PUT_LINE('-------------------------------------------');
 OPEN WCR;
 LOOP
  FETCH WCR INTO TY,QP,QC2,QC2,QC3,QC4;
  EXIT WHEN WCR%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE('문제: '||QP);
  IF TY='MC' THEN
  DBMS_OUTPUT.PUT_LINE('1.'||QC1);
  DBMS_OUTPUT.PUT_LINE('2.'||QC2);
  DBMS_OUTPUT.PUT_LINE('3.'||QC3);
  DBMS_OUTPUT.PUT_LINE('4.'||QC4);
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  ELSIF TY<>'MC' THEN
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  END IF;
 END LOOP;
 CLOSE WCR;
END;
/
SHOW ERROR;
EXEC SP_POCA(100);
select * from q_Detail;
--문제를 가장 많이 푼 사용자 부터 순서대로 나타내는 뷰
CREATE OR REPLACE VIEW BEST_PRO_USER
AS
SELECT MEM_NAME, COUNT(D_NUM) AS TOT FROM MEMBER,EXAME, EXAME_DETAIL
WHERE MEMBER.MEM_CODE=EXAME.MEM_CODE AND EXAME.EXAME_CODE = EXAME_DETAIL.EXAME_CODE
GROUP BY MEM_NAME
ORDER BY COUNT(D_NUM) DESC,MEM_NAME ASC;
SELECT * FROM BEST_PRO_USER;
select * from best_pro_user;

CREATE OR REPLACE VIEW BEST_SCORE_USER
AS
SELECT MIN(MEM_NAME) MEM_NAME, ROUND(AVG(EXAME_SCORE),2) AS AVS FROM EXAME,MEMBER 
WHERE MEMBER.MEM_CODE=EXAME.MEM_CODE
GROUP BY MEMBER.MEM_CODE
ORDER BY ROUND(AVG(EXAME_SCORE),2) DESC;

SELECT * FROM BEST_SCORE_USER;


-- 사용자별로 만든 문제 보기
create or replace procedure SP_USER_PRO (u_code in member.mem_code%type)
IS
TY QUESTION.T_CODE%TYPE;
QP QUESTION.Q_PROBLEM%TYPE;
QC1 QUESTION.Q_C1%TYPE;
QC2 QUESTION.Q_C2%TYPE;
QC3 QUESTION.Q_C3%TYPE;
QC4 QUESTION.Q_C4%TYPE;
ANS QUESTION.Q_ANS%TYPE;
U_NAME MEMBER.MEM_NAME%TYPE;
CURSOR WCR IS SELECT T_CODE,Q_PROBLEM,Q_C1,Q_C2,Q_C3,Q_C4,Q_ANS FROM QUESTION,MEMBER WHERE QUESTION.MEM_CODE=MEMBER.MEM_CODE AND MEMBER.MEM_CODE=U_CODE;
BEGIN
 SELECT MEM_NAME INTO U_NAME FROM MEMBER WHERE MEM_CODE=U_CODE;
 DBMS_OUTPUT.PUT_LINE(U_NAME||'님이 만든 문제 내역입니다.');
 DBMS_OUTPUT.PUT_LINE('-------------------------------------------');
 OPEN WCR;
 LOOP
  FETCH WCR INTO TY,QP,QC2,QC2,QC3,QC4,ANS;
  EXIT WHEN WCR%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE('문제: '||QP||' 정답: '||ANS);
  IF TY='MC' THEN
  DBMS_OUTPUT.PUT_LINE('1.'||QC1);
  DBMS_OUTPUT.PUT_LINE('2.'||QC2);
  DBMS_OUTPUT.PUT_LINE('3.'||QC3);
  DBMS_OUTPUT.PUT_LINE('4.'||QC4);
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  ELSIF TY<>'MC' THEN
  DBMS_OUTPUT.PUT_LINE('----------------------------------');
  END IF;
 END LOOP;
 CLOSE WCR;
END;
/

EXEC SP_USER_PRO('U1611300000');
--사용자별 만든 문제 수와 문제 많이 만든 순서대로 정렬
SELECT MIN(MEM_NAME)MEM_NAME, COUNT(Q_CODE)AS NOQ FROM QUESTION RIGHT OUTER JOIN MEMBER 
ON MEMBER.MEM_CODE=QUESTION.MEM_CODE
GROUP BY MEMBER.MEM_CODE
ORDER BY COUNT(Q_CODE) DESC;